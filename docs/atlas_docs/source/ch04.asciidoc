[[intro_to_asc]]
== AsciiDoc 101

http://www.methods.co.nz/asciidoc/index.html[AsciiDoc] is a text document format for writing (among other things) books, ebooks, and documentation. The main advantages of AsciiDoc are that it is easy to use and plays well with O'Reilly's publishing tools, including Atlas. It's similar to wiki markup--if you can write a Wikipedia article, then you'll have no problem with AsciiDoc. This http://powerman.name/doc/asciidoc[Asciidoc cheat sheet] covers a lot of the nitty-gritty, but the following sections will give you an overview of the markup you'll use most frequently.

You can create and edit AsciiDoc in any text editor, and then add it to Atlas by either pasting it into the wiki interface or using git. If you're on Windows, you can use http://notepad-plus-plus.org/[Notepad++] or any other text editor. If you're on a Mac, you can use TextEdit, http://macromates.com/[TextMate] (which you can pair with an https://github.com/zuckschwerdt/asciidoc.tmbundle[AsciiDoc bundle]), http://www.barebones.com/products/textwrangler/[TextWrangler], or any of a number of choices. Or maybe you prefer old school vi or Emacs. That's okay, too. The important thing is that you use the AsciiDoc markup.

This chapter illustrates some of the most common elements used in writing technical documentation.

.Use the Source, Luke
[WARNING]
====
If you're viewing this document as a PDF, EPUB, or KF8, you're seeing the _output_ from the AsciiDoc source, rather than the AsciiDoc markup itself. Since this chapter is intended as an introduction to the markup, you should view the source, available at http://cdn.oreilly.com/atlas_docs.zip[cdn.oreilly.com/atlas_docs.zip].
====

=== Chapters

Each chapter should begin with a chapter title preceded by two equals signs. It's good practice to always include a unique ID string above the chapter title.

Here's the markup:

----
[[unique_chapter_id]]
== Chapter Title
----

==== Top-Level Section
Within the chapter, this is the first and highest heading level. This markup designates AsciiDoc level 2 (equivalent to DocBook +<sect1>+). The markup looks like this:

-----------
=== Top-Level Section
-----------

==== Second-Level Section
This heading level should only follow a top-level heading. It designates AsciiDoc level 3 (equivalent to DocBook +<sect2>+). The markup looks like this:

-----------
==== Second-Level Section
-----------

==== Third-Level Section
This heading level should only follow a second-level heading. It designates AsciiDoc level 4 (equivalent to DocBook +<sect3>+). The markup looks like this:

-----------
===== Third-Level Section
-----------

=== Parts

If you want to group your chapters into parts, navigate to the file that should be the first chapter in that part, and add the part markup above the chapter title. It’s good practice to always include a unique ID string above the part title.

Here's the markup:

----
[[unique_part_id]]
= Part Title

[[unique_chapter_id]]
== Chapter Title

Chapter text begins here.
----

To add introductory text in the part, add this +partintro+ markup after the part title, but before the chapter title:

----
[partintro]
--
Insert introductory text here.
--
----

=== Prefaces

A preface file should begin with the word _preface_ in single brackets, followed on the next line by two equals signs and the preface title.

Here's the markup:

----
[preface]
== Preface Title

Preface text begins here.
----

=== Dedications

A dedication file should begin with the word _dedication_ in single brackets, followed by a blank line and then the dedication text.

Here's the markup:

----
[dedication]

This book is dedicated to my cat, Garfield.
----

[[INLINES]]
=== Inline Font Markup

Here are some standard O'Reilly font conventions with explanations of their use. Please note that the asciidoc markup for each font type is indicated in either the term title or explanation.

++++
<variablelist>
        <varlistentry>
          <term role="plain"><emphasis>_Italic_</emphasis></term>

          <listitem>
            <para>Italic text indicates new terms, URLs, email addresses, filenames, and file extensions. The asciidoc markup is one underscore character on either side of the text to be italic.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><emphasis role="bold">*Bold*</emphasis></term>

          <listitem>
            <para>Bolded text is used to emphasize a word or phrase. (Note that http://oreilly.com/oreilly/author/stylesheet.html[O’Reilly house style] prefers italics for emphasis.) The asciidoc markup is one asterisk on either side of the text to be bolded.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><literal>+Constant Width+</literal></term>

          <listitem>
            <para>Constant width, or monospaced, text is used for code, as well as within paragraphs to refer to program elements such as variable or function names, databases, data types, environment variables, statements, and keywords. The asciidoc markup is one plus sign on either side of the text to monospaced.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><userinput>*+Constant Width Bold+*</userinput></term>

          <listitem>
            <para>Monospaced and bolded text is used to show commands or other text that should be typed literally by the user. The asciidoc markup is one asterisk and one plus sign on either side of the text. Note that the asterisk (*) pair must be on the outside and the plus-symbol (+) pair on the inside.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><replaceable>_++Constant Width Italic++_</replaceable></term>

          <listitem>
            <para>Monospaced and italicized text indicates where text should be replaced with user-supplied values or by values determined by context. The asciidoc markup is one underscore and two plus signs on either side of the text. Note that the underscore (_) must be on the outside and the plus-symbol (+) pair on the inside.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><subscript>~subscript~</subscript></term>

          <listitem>
            <para>For <subscript>subscript</subscript> text, use a tilde character on either side of the subscript text.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><superscript>^superscript^</superscript></term>

          <listitem>
            <para>For <superscript>superscript</superscript> text, use a caret character on either side of the superscript text.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term role="plain"><emphasis>Hyperlinks</emphasis></term>

          <listitem>
            <para>For hyperlinks to external sources, just add the full URL string followed by brackets containing the text you'd like to appear with the URL. The bracketed text will become a clickable link in web versions. And in print versions it will appear in the text, followed by the actual URL in parenthesis.</para>
            <para>The markup looks like this:</para>
            <programlisting>http://oreilly.com[Visit O'Reilly's website]</programlisting>
             <para>Note that these will become hyperlinks in online versions, so for fake or example URLs, use <literal>+constant width+</literal> or <emphasis>_italic_</emphasis> markup instead.</para>
          </listitem>
        </varlistentry>

      </variablelist>
++++

[WARNING]
====
Please do not use AsciiDoc's mechanisms for forcing line breaks, page breaks, or ``ruler'' lines, as these don't mesh with Atlas's book building tools.
====

[[XREFS]]
=== Cross-References

All references to titled block elements and book components—figures, tables, examples, sections, chapters, parts, etc—should be marked up as cross-references, not entered as plain text. Cross-reference markup will become a live hyperlink to the target in online versions, and will automatically update if you move numbered elements (figures, chapters, etc.) around while editing.

To insert a cross-reference, follow these steps:

++++
<orderedlist>
        <listitem>
          <para>Note the id of the element you are
          referencing. If the element does not have an id,
          you will need to add one. For the book to be valid,
          ids must be unique across the entire
          book, have no spaces, and not start with a number. For example, a
          figure id looks like this:</para>

          <programlisting>[[FIG_ID]]
.Figure title
image::images/figure.png[]</programlisting>
        </listitem>

        <listitem>
          <para>Once you have the id, you can insert a cross-reference to that element elsewhere in the text by enclosing the id in double angle brackets, like so:</para>

          <programlisting>&lt;&lt;FIG_ID&gt;&gt;</programlisting>
        </listitem>
      </orderedlist>
++++

The Atlas build system will transform this ID into a standard cross-reference (or +<xref>+) for you: the rendered text will adjust automatically if you later move the target or reword its title, and it will work as a hyperlink in online versions. Any time you refer to another component of your book, please be sure to use xref markup, not hardcoded text.

<<XREF_TABLE>> shows the standard text generated from the cross-references in PDF builds.

[[XREF_TABLE]]
.Standard Cross-Reference Formats
[width="50%",options="header"]
|=======
|Target|Generated Cross-Reference Text
|chapter|Chapter 17
|table|Table 4-1
|figure|Figure 2-3
|example|Example 3-5
|sidebar|"Fooing the Bar" on page 23
|section|"Inline Macros" on page 14
|=======

Here are some live examples (hover over the text in the PDF to locate the
hyperlink):

* See <<BLOCKS>> for details.
* The results is shown in <<FIG1>>.
* Flip ahead to <<advanced_asciidoc>> for a preview.

generated from this source:

----
* See <<BLOCKS>> for details.
* The results is shown in <<FIG1>>.
* Flip ahead to <<advanced_asciidoc>> for a preview.
----

[WARNING]
====
Please do not use AsciiDoc's optional `xreflabel` and `caption` features on anchors and xrefs, as these interfere with standard generated xref formats.
====

[[indexing]]
=== Indexing

We've extended http://www.methods.co.nz/asciidoc/userguide.html#\_indexes[indexing in AsciiDoc] to include ranges, sees, and see alsos.

==== Create the index file

To include an index in your book, you must first create a blank _index.asciidoc_ file. Then paste in this single line of text:

----
= Index
----

This is the only text that should be in the index.asciidoc file. The index entries will be auto-generated during the PDF build, using the index markers you place in the text (discussed below).

Make sure to include the index.asciidoc file in the build. (If you're working with the asciidoc files outside of Atlas, you can add an include for the book.asciidoc file.)

See the http://cdn.oreilly.com/atlas_docs.zip[AsciiDoc source] of this documentation for an example index.

==== Syntax

Using the syntax below, you can insert index markers anywhere in your text.

For anything not mentioned below, please refer to the http://www.methods.co.nz/asciidoc/userguide.html[AsciiDoc User Guide], or contact us if you have index entries with special characters (e.g., quote marks, commas) and need guidance on how to format the markup.

*Basic index entry*:
----
((("primary index term")))
----

*Secondary entry*:
----
((("primary index term", "subentry")))
----

*Tertiary entry*:
----
((("primary index term", "subentry", "sub-subentry")))
----

*An index entry with a range*:
----
The future of ebooks is HTML5.((("HTML5", id="ix_html5", range="startofrange")))
In the following pages
...
blah blah blah canvas
blah blah blah local storage
blah blah blah geolocation
...
Learn HTML 5 today!(((range="endofrange", startref="ix_html5")))
----

*An index entry with a “(see)” and no page reference*:
----
Flash has been supplanted by HTML5.((("Flash", see="HTML5")))
----

*A “(see also)” entry*:
----
In addition to the Makerbot, RepRap also allows you to make 3-D stuff
((("Makerbot", seealso="RepRap")))
----

*Changing how an entry is alphabetized*:
----
Makerbot lets you produce your own 3-D trinkets.((("3-D", sortas="three-d")))
----

[WARNING]
====
For basic index entries without attributes (i.e., without ranges, a “see,” a “see also,” or a “sortas”), you do not need to enclose terms in quotation marks. For example, the following markup is fine:
----
(((XML, RDF, SPARQL)))
----
However, if you include any attributes, you must put all entries in quotes, e.g.:
----
((("XML", "RDF", "SPARQL", seealso="XQuery")))
----
====

[[BLOCKS]]
=== Block Elements

[[SIDEBARS]]
==== Sidebars

Sidebar markup looks like this:

----
.Sidebar Title
****
Sidebar text is surrounded by four asterisk characters above and below.
****
----

Sidebars render like this:

.What's Going On, Anyway?
****
A general understanding of what is going on under the hood of Atlas will help you make the most of the system. One of the primary appeals of AsciiDoc is that it was created to export to http://www.docbook.org/[DocBook XML]. In other words, for each AsciiDoc markup syntax, there is an equivalent DocBook element. When you build your book (as described in <<building_and_debugging>>), Atlas converts the AsciiDoc to DocBook and then generates the book formats from that DocBook. This series of magical transformations is part of what makes writing in Atlas fun, but it also requires you to use the correct AsciiDoc markup for things to work right.

If you get a build error, the most likely cause is an AsciiDoc markup error. Atlas provides error message logs to help you troubleshoot and fix syntax errors. Read more about building and debugging in <<building_and_debugging>>.
****

[[Admonitions]]
==== Admonitions (Notes and Warnings)

You have the option of using note, tip, warning, and caution elements for supplemental information. Please note that the O'Reilly stylesheets make no visual distinction between the way warning and caution elements render, as well as the way note and tip elements render.

===== Notes

[NOTE]
===============================
This is how notes render. Notes can be used for including supplemental information in your text.
===============================

As mentioned above, you'll notice that notes and tips look the same in O'Reilly books.

The asciidoc markup for a note looks like this:

----
[NOTE]
===============================
Here's some text inside a note.
===============================
----

===== Tips

.Titled Tip
[TIP]
===============================
This is how tips render. Tips can be used for including supplemental information in your text. Including a tip title is optional.
===============================

As mentioned above, you'll notice that notes and tips look the same in O'Reilly books. You may also notice that this tip has a title. We do support optional titles in admonitions (in most series). If you don't want a title for your tip, just leave out the entire _.Tip Title_ line in the markup below.

The asciidoc markup for a tip looks like this:

----
.Tip Title
[TIP]
===============================
Here's some text inside a tip.
===============================
----

===== Warnings

.Titled Warning
[WARNING]
===============================
This is how warnings render. Warnings can be used for including supplemental information in your text. Including a warning title is optional.
===============================

As mentioned above, you'll notice that warnings and cautions look the same in O'Reilly books. You may also notice that this warning has a title. We do support optional titles in admonitions (in most series). If you don't want a title for your warning, just leave out the entire _.Warning Title_ line in the markup below.

The asciidoc markup for a warning looks like this:

----
.Warning Title
[TIP]
===============================
Here's some text inside a warning.
===============================
----

===== Cautions

[CAUTION]
===============================
This is how cautions render. Cautions can be used for including supplemental information in your text.
===============================

As mentioned above, you'll notice that warnings and cautions look the same in O'Reilly books.

The asciidoc markup for a caution looks like this:

----
[CAUTION]
===============================
Here's some text inside a caution.
===============================
----

[[figures_and_other_images]]
==== Figures and Other Images

Below this paragraph is <<FIG1>> (a figure, titled and cross-referenced). Figures appear exactly where you place them in the text, which can sometimes create PDF pages with a lot of white space. While it is not generally necessary, you can add an attribute of `float="true"` so that the text flows around the image:

----
[[FIG1]]
.A Figure
image::images/tiger.png[float="true"]
----

[[FIG1]]
.A Figure
[float="none"]
image::images/tiger.png["An image of a cartoonish tiger head"]

Or you may prefer an image with no caption, like so:

image::images/screenshot.png["A screenshot of the AsciiDoc homepage"]

===== Adding Alt Text to Images

To improve accessibility in your ebook files, please consider adding alt text to the images, like so:

----
[[FIG1]]
.A Figure
image::images/tiger.png["An image of a cartoonish tiger head"]
----

Or combine it with a `float="true"`:

----
[[FIG1]]
.A Figure
[float="true"]
image::images/tiger.png["An image of a cartoonish tiger head"]
----

===== Using AsciiDoc to Size Images

While it should not be necessary in most circumstances, you can control the size of an image in the PDF output by adding an absolute value of width or height, like so:

----
image::images/filename.png[width="2in"]

image::images/filename.png[height="2in"]
----

Or you can use scale as a percentage to limit the width:

----
image::images/filename.png[scale="75"]
----

Note that you should not include a percentage sign.

[[Lists]]
==== Lists

There are three common types of lists. The http://oreilly.com/oreilly/author/stylesheet.html#lists[O’Reilly Stylesheet and Word List] has more details about when to use them, but here’s the markup and an example of each.

[[Bulleted]]
===== Bulleted (aka Itemized) Lists

Rendering:

* lions
* tigers
** sabre-toothed
** teapotted
* lions, tigers, and bears
+
Use a plus sign (on its own line) with the text below to add multiple paragraphs to a list item.

Here's the markup:

----
* lions
* tigers
** sabre-toothed
** teapotted
* lions, tigers, and bears
+
Use a plus sign (on its own line) with the text below to add multiple paragraphs to a list item.
----


[[Ordered]]
===== Ordered (aka Numbered) Lists

Rendering:

. Preparation
. Assembly
.. Measure
.. Combine
.. Bake
. Applause
+
Use a plus sign (on its own line) with the text below to add multiple paragraphs to a list item.

Here's the markup:

----
. Preparation
. Assembly
.. Measure
.. Combine
.. Bake
. Applause
+
Use a plus sign (on its own line) with the text below to add multiple paragraphs to a list item.
----

[[Labeled]]
===== Labeled (aka Variable or Term-Definition) Lists

Rendering:

Term 1::
  Definition/description
Term 2::
  Something else

Here's the markup:

----
Term 1::
  Definition/description
Term 2::
  Something else
----

[[tables_desc]]
==== Tables

Atlas table styles vary slightly between series. If your material warrants something other than the default style as shown in <<STD_TABLE>>, please consult with your editor.

The Asciidoc markup for tables looks like this:

....
.A Table
[width="50%",options="header"]
|=======
|P|Q|P^Q
|T|T|T
|T|F|F
|F|T|F
|F|F|F
|=======
....

Depending on the particular series your book is in, it will render similar to this:

[[STD_TABLE]]
.A Table
[width="50%",options="header"]
|=======
|P|Q|P^Q
|T|T|T
|T|F|F
|F|T|F
|F|F|F
|=======

[[code_explanation]]
==== Code

Code blocks (or as the http://www.methods.co.nz/asciidoc/userguide.html[AsciiDoc documentation] refers to them, ``listing'' blocks), are defined using four hyphens above and below the code block content.  Here's an example of the markup:

....
----
Hello world!

0        10        20        30        40
1234567890123456789012345678901234567890
----
....

Which will render like this:

----
Hello world!

0        10        20        30        40
1234567890123456789012345678901234567890
----

Formal code blocks (titled and cross-referenced) use the following markup:

....
[[EX1]]
.An Example
====
----
Hello world!

0        10        20        30        40
1234567890123456789012345678901234567890
----
====
....

And here's how it renders:

[[EX1]]
.An Example
====
----
Hello world!

0        10        20        30        40
1234567890123456789012345678901234567890
----
====

[[inline-formatting]]
===== Inline Formatting Within Code

In AsciiDoc, there is no built-in mechanism for inline formatting within code. If you want to use inline formatting--in particular, for standard O'Reilly font conventions such as *+<userinput> (CW+bold)+* and _++<replaceable> (CW+italic)++_ or if you want to include line annotations--you can do so by using a passthrough block (see <<passthroughs>> for an explanation of passthroughs). Here's the markup to use a passthrough with the Docbook element +<screen>+:

....
++++
<screen>
hostname $ <userinput>date</userinput>
Sun Apr  1 12:34:56 GMT 1984
</screen>
++++
....

which renders like this:

++++
<screen>
hostname $ <userinput>date</userinput>
Sun Apr  1 12:34:56 GMT 1984
</screen>
++++

And here's the markup to use a passthrough with the +<programlisting>+ and +&#x3c;lineannotation>+ Docbook elements:

....
++++
<programlisting>
from __future__ import with_statement # This isn't required in Python 2.6
                          <lineannotation>Above is a comment in the code, while this is an "annotation"</lineannotation>
with open("<replaceable>hello.txt</replaceable>") as f:
    for line in f:        <lineannotation>(note regular italic here vs. constant-width in "hello.txt" on line above)</lineannotation>
        print line</programlisting>
++++
....

which renders like this:

++++
<programlisting>
from __future__ import with_statement # This isn't required in Python 2.6
                          <lineannotation>Above is a comment in the code, while this is an "annotation"</lineannotation>
with open("<replaceable>hello.txt</replaceable>") as f:
    for line in f:        <lineannotation>(note regular italic here vs. constant-width in "hello.txt" on line above)</lineannotation>
        print line</programlisting>
++++

[[syntax_highlighting]]
===== Syntax Highlighting

The Atlas book-building toolchain supports syntax highlighting via http://pygments.org/[Pygments]. You need only add +[source]+ above each code block that you want to be syntax-highlighted, and specify the language of the code. For example, the following code:

....
[source,java]
----
int radius = 40;
float x = 110;
float speed = 0.5;
int direction = 1;
----
....

will render in the EPUB, PDF, and KF8 (Kindle Fire only) as follows:

[source,java]
----
int radius = 40;
float x = 110;
float speed = 0.5;
int direction = 1;
----

Pygments supports a wide variety of languages that can be used in +[source]+; see the full list available on the http://pygments.org/docs/lexers/[the Pygments website]. Ebook readers that do not have color screens will still display the highlighting, but in more subtle shades of gray.

Please note the following caveats:

* The color scheme is consistent across books and cannot be changed at this time.
* Unless your book is printing in color, the PDF used for print will contain no highlighting.

[[external_code_files]]
===== External Code Files

There are two ways to include external code files. You can include an external file that is text-only (no markup like line annotations or inline formatting), or you can include an external file marked up with valid Docbook, which can contain inline markup. Callouts will work with either method.

*Text-only External Code File (Asciidoc markup)*

To include an external code file that is text-only (no inline markup besides callouts), use the +include::+ macro inside of a delimited code block, as shown here:

....
[source,java]
----
\include::code/HelloWorld.java[]
----
....

For info about using callouts with your external Asciidoc code file, see <<code_callouts>>.

*External Code File with Inline Markup (Docbook markup)*

To include an external file that contains inline markup (e.g., line annotations or inline font formatting), use passthrough markup around around the +include::+ macro, instead of code block delimiters:

....
++++
\include::code/inline_markup.txt[]
++++
....

And then the contents of inline_markup.txt would contain only the Docbook markup. In our example, it might look something like this:

....
<programlisting>Roses are <replaceable>red</replaceable>,
   Violets are <replaceable>blue</replaceable>. <lineannotation>This is a line annotation</lineannotation>
Some poems rhyme;
   This one <userinput>doesn't</userinput>.</programlisting>
....

and it will render like this:

++++
include::code/inline_markup.txt[]
++++

[[code_callouts]]
===== Code Callouts

http://www.sagehill.net/docbookxsl/AnnotateListing.html#Callouts[Code callouts] are used to mark specific lines of code with icons keyed to explanatory text outside the code block. These icon pairs function as bidirectional links in electronic PDF and downstream formats (i.e., you can click on the icon in the code to jump to the explanation, and vice versa).

The built-in AsciiDoc mechanism (shown below) is somewhat more limited; for one thing, icons are hyperlinked from text to code, but not vice versa. However, you can always use a passthrough block (see <<passthroughs>>) for full functionality.

If you have a need to refer to the same bit of explanatory text from more than one line of code, see <<callout-multiples>> (in <<advanced_asciidoc>>).

*AsciiDoc Code Callouts*

Here's the Asciidoc markup for code callouts:

[[asc_callouts]]
....
----
Roses are red,
   Violets are blue. \<1>
Some poems rhyme;
   This one doesn't. \<2>
----
\<1> Violets actually have a color value of +#9933cc+.
\<2> This poem uses the literary device known as a "surprise ending."
....

which renders like this:

----
Roses are red,
   Violets are blue. <1>
Some poems rhyme;
   This one doesn't. <2>
----
<1> Violets actually have a color value of +#9933cc+.
<2> This poem uses the literary device known as a "surprise ending."

*Asciidoc External Code File with Callouts*

To use code callouts with an external Asciidoc code file, add the callout text items below the code block:

....
[source,java]
----
\include::code/HelloWorld.java[]
----
\<1> This is number one.
\<2> This is number two.
....

The corresponding callout markers should be present in the external code file. In our example, the external HelloWorld.java file contents would look like this:

....
package com.marakana;

import android.app.Activity;
import android.os.Bundle;

public class HelloWorld extends Activity {  \<1>
  /** Called when the activity is first created. */
  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);  \<2>
    setContentView(R.layout.main);
  }
}
....

And it would render like this:

[source,java]
----
include::code/HelloWorld.java[]
----
<1> This is number one.
<2> This is number two.


*Docbook Passthroughs with Callouts*

You can use Docbook passthroughs for your code if you'd like to have bidirectional callout links, or if you have inline formatting in your code. The markup for Docbook passthrough callouts is mostly the same whether you're writing the markup directly in the Asciidoc chapter file or writing the markup in an external file.

If you're adding the passthrough directly in the Asciidoc chapter file, the markup looks like this:

....
++++
<programlisting>Roses are <replaceable>red</replaceable>,
   Violets are <replaceable>blue</replaceable>. <co id="violets-co" linkends="violets"/>
Some poems rhyme;
   This one <userinput>doesn't</userinput>. <co id="poem-co" linkends="poem"/></programlisting>

<calloutlist>
  <callout id="violets" arearefs="violets-co">
    <para>Violets actually have a color value of +#9933cc+.</para>
  </callout>
  <callout id="poem" arearefs="poem-co">
    <para>This poem uses the literary device known as a &ldquo;surprise ending.&rdquo;</para>
  </callout>
</calloutlist>
++++
....

[WARNING]
===============================
If using passthroughs for callouts, please use the paired markup as shown above (not +<areaspec>+).
===============================

If you have your code in an external file, your markup will look like this:

....
++++
\include::code/inline_markup_with_callouts.txt[]
++++
....

And the contents of your external code file (inline_markup_with_callouts.txt, in our example here) will look something like this:

....
<programlisting>Roses are <replaceable>red</replaceable>,
   Violets are <replaceable>blue</replaceable>. <co id="violets-co" linkends="violets"/>
Some poems rhyme;
   This one doesn't. <co id="poem-co" linkends="poem"/></programlisting>

<calloutlist>
  <callout id="violets" arearefs="violets-co">
    <para>Violets actually have a color value of +#9933cc+.</para>
  </callout>
  <callout id="poem" arearefs="poem-co">
    <para>This poem uses the literary device known as a &ldquo;surprise ending.&rdquo;</para>
  </callout>
</calloutlist>
....

which will render like this:

++++
include::code/inline_markup_with_callouts.txt[]
++++

[[other_block_elements]]
==== Other Block Elements

===== Notes to Production

To leave a note to the Production team, please use a passthrough block with the Docbook +<remark>+ element, like this:

....
++++
<remark>Use a passthrough block like this for notes to production staff</remark>
++++
....

// NB: AsciiDoc comments do _not_ get passed to DocBook output by default.

===== Quotes

To add a quote block to your text, use the following markup. Here's a +<quote>+ attributed to Benjamin Disraeli (by Wilfred Meynell, according to Frank Muir):

....
[quote, Wilfred Meynell]
____
Many thanks; I shall lose no time in reading it.
____
....

which renders like this:

[quote, Wilfred Meynell]
____
Many thanks; I shall lose no time in reading it.
____
